const std = @import("std");
const root = @import("root");
const microzig_options = root.microzig_options;
const microzig = @import("microzig");
const mmio = microzig.mmio;
const app = microzig.app;

const Core = enum {
    cortex_m0,
    cortex_m0plus,
    cortex_m3,
    cortex_m33,
    cortex_m4,
    cortex_m55,
    cortex_m7,
};

const cortex_m = std.meta.stringToEnum(Core, microzig.config.cpu_name) orelse
    @compileError(std.fmt.comptimePrint("Unrecognized Cortex-M core name: {s}", .{microzig.config.cpu_name}));

/// Segger's RTT support
pub const rtt = @import("rtt");

/// Complete list of interrupt values based on the chip's `interrupts` array.
pub const Interrupt = microzig.utilities.GenerateInterruptEnum(i32);

/// Used to set interrupt handlers.
pub const Handler = microzig.interrupt.Handler;

/// Allowable `interrupt` options for microzig.options.
pub const InterruptOptions = microzig.utilities.GenerateInterruptOptions(&.{
    .{ .InterruptEnum = Interrupt, .HandlerFn = Handler },
});

/// Allowable `platform` options for microzig.options.
pub const CPU_Options = core.CPU_Options;

/// External Interrupts
/// These are the interrupts generated by the NVIC.
pub const ExternalInterrupt = blk: {
    // Note: The value of each field is the interrupt number (VTOR offset),
    //       not the offset into the whole vector table.

    const vector_info = @typeInfo(Interrupt).@"enum";
    const vector_fields = vector_info.fields;
    var result_len: usize = 0;

    for (vector_fields) |field| {
        if (field.value >= 0) result_len += 1;
    }

    if (result_len == 0) break :blk enum {};

    var fields: [result_len]std.builtin.Type.EnumField = undefined;
    var field_index: usize = 0;

    for (microzig.chip.interrupts) |intr| {
        if (intr.index >= 0) {
            fields[field_index] = .{
                .name = intr.name,
                .value = intr.index,
            };
            field_index += 1;
        }
    }

    break :blk @Type(.{ .@"enum" = .{
        .tag_type = u8,
        .fields = &fields,
        .decls = &.{},
        .is_exhaustive = true,
    } });
};

/// Machine exceptions.
pub const Exception = blk: {
    // Note: The value of each field is the index into the whole
    //       vector table, not the negative offset from VTOR.

    const vector_info = @typeInfo(Interrupt).@"enum";
    const vector_fields = vector_info.fields;
    var result_len: usize = 0;

    for (vector_fields) |field| {
        if (field.value < 0) result_len += 1;
    }

    if (result_len == 0) break :blk enum {};

    var fields: [result_len]std.builtin.Type.EnumField = undefined;
    var field_index: usize = 0;

    for (microzig.chip.interrupts) |intr| {
        if (intr.index < 0) {
            fields[field_index] = .{
                .name = intr.name,
                .value = 16 + intr.index, // Cortex-M exceptions are mapped to vector table slots 0 - 15
            };
            field_index += 1;
        }
    }

    break :blk @Type(.{ .@"enum" = .{
        .tag_type = u4,
        .fields = &fields,
        .decls = &.{},
        .is_exhaustive = true,
    } });
};

pub const interrupt = struct {
    /// The priority of an interrupt.
    /// Cortex-M uses a reversed priority scheme so the lowest priority is 15 and the highest is 0.
    ///
    /// Note: Some platforms may only use the most significant bits of the priority register.
    pub const Priority = enum(u8) {
        lowest = 15,
        highest = 0,
        _,
    };

    pub fn globally_enabled() bool {
        var mrs: u32 = undefined;
        asm volatile ("mrs %[mrs], 16"
            : [mrs] "+r" (mrs),
        );
        return mrs & 0x1 == 0;
    }

    pub fn enable_interrupts() void {
        asm volatile ("cpsie i");
    }

    pub fn disable_interrupts() void {
        asm volatile ("cpsid i");
    }

    fn assert_not_exception(comptime int: Interrupt) void {
        if (@intFromEnum(int) < 0) {
            @compileError("expected interrupt, got exception: " ++ @tagName(int));
        }
    }

    pub const exception = struct {
        const ppb = microzig.chip.peripherals.PPB;

        pub fn is_enabled(comptime excpt: Exception) bool {
            switch (cortex_m) {
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    const raw = ppb.SHCSR.raw;
                    switch (excpt) {
                        .UsageFault => return (raw & 0x0004_0000) != 0,
                        .BusFault => return (raw & 0x0002_0000) != 0,
                        .MemManageFault => return (raw & 0x0001_0000) != 0,
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    const raw = ppb.SHCSR.raw;
                    switch (excpt) {
                        .SecureFault => return (raw & 0x0008_0000) != 0,
                        .UsageFault => return (raw & 0x0004_0000) != 0,
                        .BusFault => return (raw & 0x0002_0000) != 0,
                        .MemManageFault => return (raw & 0x0001_0000) != 0,
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        pub fn enable(comptime excpt: Exception) void {
            switch (cortex_m) {
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    switch (excpt) {
                        .UsageFault => ppb.SHCSR.raw |= 0x0004_0000,
                        .BusFault => ppb.SHCSR.raw |= 0x0002_0000,
                        .MemManageFault => ppb.SHCSR.raw |= 0x0001_0000,
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    switch (excpt) {
                        .SecureFault => ppb.SHCSR.raw |= 0x0008_0000,
                        .UsageFault => ppb.SHCSR.raw |= 0x0004_0000,
                        .BusFault => ppb.SHCSR.raw |= 0x0002_0000,
                        .MemManageFault => ppb.SHCSR.raw |= 0x0001_0000,
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        pub fn disable(comptime excpt: Exception) void {
            switch (cortex_m) {
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    switch (excpt) {
                        .UsageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0004_0000),
                        .BusFault => ppb.SHCSR.raw &= ~@as(u32, 0x0002_0000),
                        .MemManageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0001_0000),
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    switch (excpt) {
                        .SecureFault => ppb.SHCSR.raw &= ~@as(u32, 0x0008_0000),
                        .UsageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0004_0000),
                        .BusFault => ppb.SHCSR.raw &= ~@as(u32, 0x0002_0000),
                        .MemManageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0001_0000),
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        pub fn is_pending(comptime excpt: Exception) bool {
            switch (cortex_m) {
                .cortex_m0plus,
                => {
                    if (excpt == .SVCALL) return (ppb.SHCSR.raw & 0x0000_8000) != 0;
                    @compileError("not supported on this platform");
                },
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    const raw = ppb.SHCSR.raw;
                    switch (excpt) {
                        .SVCall => return (raw & 0x0000_8000) != 0,
                        .BusFault => return (raw & 0x0000_4000) != 0,
                        .MemManageFault => return (raw & 0x0000_2000) != 0,
                        .UsageFault => return (raw & 0x0000_1000) != 0,
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    const raw = ppb.SHCSR.raw;
                    switch (excpt) {
                        .HardFault => return (raw & 0x0020_0000) != 0,
                        .SecureFault => return (raw & 0x0010_0000) != 0,
                        .SVCall => return (raw & 0x0000_8000) != 0,
                        .BusFault => return (raw & 0x0000_4000) != 0,
                        .MemManageFault => return (raw & 0x0000_2000) != 0,
                        .UsageFault => return (raw & 0x0000_1000) != 0,
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        pub fn set_pending(comptime excpt: Exception) void {
            switch (cortex_m) {
                .cortex_m0plus,
                => {
                    if (excpt == .SVCALL) ppb.SHCSR.raw |= 0x0000_8000;
                    @compileError("not supported on this platform");
                },
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    switch (excpt) {
                        .SVCall => ppb.SHCSR.raw |= 0x0000_8000,
                        .BusFault => ppb.SHCSR.raw |= 0x0000_4000,
                        .MemManageFault => ppb.SHCSR.raw |= 0x0000_2000,
                        .UsageFault => ppb.SHCSR.raw |= 0x0000_1000,
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    switch (excpt) {
                        .HardFault => ppb.SHCSR.raw |= 0x0020_0000,
                        .SecureFault => ppb.SHCSR.raw |= 0x0010_0000,
                        .SVCall => ppb.SHCSR.raw |= 0x0000_8000,
                        .BusFault => ppb.SHCSR.raw |= 0x0000_4000,
                        .MemManageFault => ppb.SHCSR.raw |= 0x0000_2000,
                        .UsageFault => ppb.SHCSR.raw |= 0x0000_1000,
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        pub fn clear_pending(comptime excpt: Exception) void {
            switch (cortex_m) {
                .cortex_m0plus,
                => {
                    if (excpt == .SVCALL) ppb.SHCSR.raw &= ~@as(u32, 0x0000_8000);
                    @compileError("not supported on this platform");
                },
                .cortex_m3, .cortex_m4, .cortex_m7 => {
                    switch (excpt) {
                        .SVCall => ppb.SHCSR.raw &= ~@as(u32, 0x0000_8000),
                        .BusFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_4000),
                        .MemManageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_2000),
                        .UsageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_1000),
                        else => @compileError("not supported on this platform"),
                    }
                },
                .cortex_m33,
                .cortex_m55,
                => {
                    switch (excpt) {
                        .HardFault => ppb.SHCSR.raw &= ~@as(u32, 0x0020_0000),
                        .SecureFault => ppb.SHCSR.raw &= ~@as(u32, 0x0010_0000),
                        .SVCall => ppb.SHCSR.raw &= ~@as(u32, 0x0000_8000),
                        .BusFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_4000),
                        .MemManageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_2000),
                        .UsageFault => ppb.SHCSR.raw &= ~@as(u32, 0x0000_1000),
                        else => @compileError("not supported on this platform"),
                    }
                },
                else => @compileError("not supported on this platform"),
            }
        }

        /// Note: Although the Priority values are 0 - 15, some platforms may
        ///       only use the most significant bits.
        pub fn set_priority(comptime excpt: Exception, priority: Priority) void {
            const num: u2 = @intCast(@intFromEnum(excpt) / 4);
            const shift: u5 = @as(u5, @intCast(@intFromEnum(excpt))) % 4 * 8;

            // The code below is safe since the switch is compile-time resolved.
            // The any SHPRn register which is unavailable on a platform will
            // not be accessed as no matching `Exception` will be exist.

            switch (num) {
                0 => {
                    @compileError("Cannot set the priority for the exception");
                },
                1 => {
                    ppb.SHPR1.raw &= ~(@as(u32, 0xFF) << shift);
                    ppb.SHPR1.raw |= @as(u32, @intFromEnum(priority)) << shift;
                },
                2 => {
                    ppb.SHPR2.raw &= ~(@as(u32, 0xFF) << shift);
                    ppb.SHPR2.raw |= @as(u32, @intFromEnum(priority)) << shift;
                },
                3 => {
                    ppb.SHPR3.raw &= ~(@as(u32, 0xFF) << shift);
                    ppb.SHPR3.raw |= @as(u32, @intFromEnum(priority)) << shift;
                },
            }
        }

        pub fn get_priority(comptime excpt: Exception) Priority {
            const num: u2 = @intCast(@intFromEnum(excpt) / 4);
            const shift: u5 = @as(u5, @intCast(@intFromEnum(excpt))) % 4 * 8;

            const raw: u8 = (switch (num) {
                0 => @compileError("Cannot get the priority for the exception"),
                1 => ppb.SHPR1.raw,
                2 => ppb.SHPR2.raw,
                3 => ppb.SHPR3.raw,
            } >> shift) & 0xFF;

            return @enumFromInt(raw);
        }

        pub fn set_handler(comptime excpt: Exception, handler: Handler) Handler {
            if (@intFromEnum(excpt) == 0) {
                @compileError("Cannot set handler for slot 0 (initial stack pointer)");
            }

            if (!interrupt.has_ram_vectors()) {
                @compileError("RAM vectors are disabled. Consider adding .platform = .{ .ram_vectors = true } to your microzig_options");
            }

            var vector_table: *volatile [vector_count]Handler = @ptrFromInt(peripherals.scb.VTOR);

            // The Exception enum value is the vector table slot number.
            const old_handler = vector_table[@intFromEnum(excpt)];
            vector_table[@intFromEnum(excpt)] = handler;
            return old_handler;
        }
    };

    const nvic = peripherals.nvic;

    pub fn is_enabled(comptime int: ExternalInterrupt) bool {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                return nvic.ISER & (1 << num) != 0;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                return nvic.ISER[bank] & (1 << index) != 0;
            },
        }
    }

    pub fn enable(comptime int: ExternalInterrupt) void {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                nvic.ISER |= 1 << num;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                nvic.ISER[bank] |= 1 << index;
            },
        }
    }

    pub fn disable(comptime int: ExternalInterrupt) void {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                nvic.ICER |= 1 << num;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                nvic.ICER[bank] |= 1 << index;
            },
        }
    }

    pub fn is_pending(comptime int: ExternalInterrupt) bool {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                return nvic.ISPR & (1 << num) != 0;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                return nvic.ISPR[bank] & (1 << index) != 0;
            },
        }
    }

    pub fn set_pending(comptime int: ExternalInterrupt) void {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                nvic.ISPR |= 1 << num;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                nvic.ISPR[bank] |= 1 << index;
            },
        }
    }

    // TODO: also for exceptions
    pub fn clear_pending(comptime int: ExternalInterrupt) void {
        const num: comptime_int = @intFromEnum(int);
        switch (cortex_m) {
            .cortex_m0,
            .cortex_m0plus,
            => {
                nvic.ICPR |= 1 << num;
            },
            .cortex_m3,
            .cortex_m33,
            .cortex_m4,
            .cortex_m55,
            .cortex_m7,
            => {
                const bank = num / 32;
                const index = num % 32;
                nvic.ICPR[bank] |= 1 << index;
            },
        }
    }

    pub fn set_priority(comptime int: ExternalInterrupt, priority: Priority) void {
        peripherals.nvic.IPR[@intFromEnum(int)] = @intFromEnum(priority);
    }

    pub fn get_priority(comptime int: ExternalInterrupt) Priority {
        return @enumFromInt(peripherals.nvic.IPR[@intFromEnum(int)]);
    }

    pub inline fn has_ram_vectors() bool {
        return @hasField(@TypeOf(microzig_options.cpu), "ram_vectors") and microzig_options.cpu.ram_vectors;
    }

    pub inline fn has_ram_vectors_section() bool {
        return @hasField(@TypeOf(microzig_options.cpu), "has_ram_vectors_section") and microzig_options.cpu.has_ram_vectors_section;
    }

    pub fn set_handler(int: ExternalInterrupt, handler: ?Handler) ?Handler {
        if (!has_ram_vectors()) {
            @compileError("RAM vectors are disabled. Consider adding .platform = .{ .ram_vectors = true } to your microzig_options");
        }

        var vector_table: *volatile [vector_count]Handler = @ptrFromInt(peripherals.scb.VTOR);

        // ExternalInterrupt vectors start at table slot number 16.
        const old_handler = vector_table[@intFromEnum(int) + 16];
        vector_table[@intFromEnum(int) + 16] = handler orelse microzig.interrupt.unhandled;
        return if (old_handler.c == microzig.interrupt.unhandled.c) null else old_handler;
    }
};

pub fn executing_isr() bool {
    return peripherals.scb.ICSR.read().VECTACTIVE != 0;
}

pub fn enable_fault_irq() void {
    asm volatile ("cpsie f");
}
pub fn disable_fault_irq() void {
    asm volatile ("cpsid f");
}

pub fn nop() void {
    asm volatile ("nop");
}
pub fn wfi() void {
    asm volatile ("wfi");
}
pub fn wfe() void {
    asm volatile ("wfe");
}
pub fn sev() void {
    asm volatile ("sev");
}
pub fn isb() void {
    asm volatile ("isb");
}
pub fn dsb() void {
    asm volatile ("dsb");
}
pub fn dmb() void {
    asm volatile ("dmb");
}
pub fn clrex() void {
    asm volatile ("clrex");
}

const vector_count = @sizeOf(microzig.chip.VectorTable) / @sizeOf(usize);

var ram_vectors: [vector_count]usize align(256) = undefined;

pub const startup_logic = struct {
    extern fn microzig_main() noreturn;

    // it looks odd to just use a u8 here, but in C it's common to use a
    // char when linking these values from the linkerscript. What's
    // important is the addresses of these values.
    extern var microzig_data_start: u8;
    extern var microzig_data_end: u8;
    extern var microzig_bss_start: u8;
    extern var microzig_bss_end: u8;
    extern const microzig_data_load_start: u8;

    pub fn ram_image_entry_point() linksection("microzig_ram_start") callconv(.naked) void {
        asm volatile (
            \\
            // Set VTOR to point to ram table
            \\mov r0, %[_vector_table]
            \\mov r1, %[_VTOR_ADDRESS]
            \\str r0, [r1]
            // Set up stack and jump to _start
            \\ldm r0!, {r1, r2}
            \\msr msp, r1
            \\bx r2
            :
            : [_vector_table] "r" (&startup_logic._vector_table),
              [_VTOR_ADDRESS] "r" (&peripherals.scb.VTOR),
            : "memory", "r0", "r1", "r2"
        );
    }

    pub fn _start() callconv(.c) noreturn {
        if (comptime !is_ramimage()) {
            // fill .bss with zeroes
            {
                const bss_start: [*]u8 = @ptrCast(&microzig_bss_start);
                const bss_end: [*]u8 = @ptrCast(&microzig_bss_end);
                const bss_len = @intFromPtr(bss_end) - @intFromPtr(bss_start);

                @memset(bss_start[0..bss_len], 0);
            }

            // load .data from flash
            {
                const data_start: [*]u8 = @ptrCast(&microzig_data_start);
                const data_end: [*]u8 = @ptrCast(&microzig_data_end);
                const data_len = @intFromPtr(data_end) - @intFromPtr(data_start);
                const data_src: [*]const u8 = @ptrCast(&microzig_data_load_start);

                @memcpy(data_start[0..data_len], data_src[0..data_len]);
            }

            // Move vector table to RAM if requested
            if (interrupt.has_ram_vectors()) {
                // Copy vector table to RAM and set VTOR to point to it

                if (comptime interrupt.has_ram_vectors_section()) {
                    @export(&ram_vectors, .{
                        .name = "_ram_vectors",
                        .section = "ram_vectors",
                        .linkage = .strong,
                    });
                } else {
                    @export(&ram_vectors, .{
                        .name = "_ram_vectors",
                        .linkage = .strong,
                    });
                }

                const flash_vector: [*]const usize = @ptrCast(&_vector_table);

                @memcpy(ram_vectors[0..vector_count], flash_vector[0..vector_count]);

                peripherals.scb.VTOR = @intFromPtr(&ram_vectors);
            }
        }

        microzig_main();
    }

    const VectorTable = microzig.chip.VectorTable;

    // will be imported by microzig.zig to allow system startup.
    pub const _vector_table: VectorTable = blk: {
        var tmp: VectorTable = .{
            .initial_stack_pointer = microzig.config.end_of_stack,
            .Reset = .{ .c = microzig.cpu.startup_logic._start },
        };

        for (@typeInfo(@TypeOf(microzig_options.interrupts)).@"struct".fields) |field| {
            const maybe_handler = @field(microzig_options.interrupts, field.name);
            if (maybe_handler) |handler| {
                @field(tmp, field.name) = handler;
            }
        }

        break :blk tmp;
    };
};

fn is_ramimage() bool {
    return microzig.config.ram_image;
}

pub fn export_startup_logic() void {
    if (is_ramimage())
        @export(&startup_logic.ram_image_entry_point, .{
            .name = "_entry_point",
            .linkage = .strong,
        })
    else
        @export(&startup_logic._vector_table, .{
            .name = "_vector_table",
            .section = "microzig_flash_start",
            .linkage = .strong,
        });

    @export(&startup_logic._start, .{
        .name = "_start",
    });
}

const scs_base = 0xE000E000;
const itm_base = 0xE0000000;
const dwt_base = 0xE0001000;
const tpi_base = 0xE0040000;

const coredebug_base = 0xE000EDF0;
const systick_base = scs_base + 0x0010;
const nvic_base = scs_base + 0x0100;
const scb_base = scs_base + core.scb_base_offset;
const mpu_base = scs_base + 0x0D90;

const properties = microzig.chip.properties;
// TODO: will have to standardize this with regz code generation
const mpu_present = @hasDecl(properties, "__MPU_PRESENT") and std.mem.eql(u8, properties.__MPU_PRESENT, "1");

const core = blk: {
    break :blk switch (cortex_m) {
        .cortex_m0 => @import("cortex_m/m0.zig"),
        .cortex_m0plus => @import("cortex_m/m0plus.zig"),
        .cortex_m3 => @import("cortex_m/m3.zig"),
        .cortex_m33 => @import("cortex_m/m33.zig"),
        .cortex_m4 => @import("cortex_m/m4.zig"),
        .cortex_m55 => @import("cortex_m/m55.zig"),
        .cortex_m7 => @import("cortex_m/m7.zig"),
    };
};

pub const utils = switch (cortex_m) {
    .cortex_m7 => @import("cortex_m/m7_utils.zig"),
    else => void{},
};

pub const peripherals = struct {
    /// System Control Block (SCB).
    pub const scb: *volatile types.peripherals.SystemControlBlock = @ptrFromInt(scb_base);

    /// Nested Vector Interrupt Controller (NVIC).
    pub const nvic: *volatile types.peripherals.NestedVectorInterruptController = @ptrFromInt(nvic_base);

    /// System Timer (SysTick).
    pub const systick: *volatile types.peripherals.SysTick = @ptrFromInt(systick_base);

    /// Memory Protection Unit (MPU).
    pub const mpu: *volatile types.peripherals.MemoryProtectionUnit = if (mpu_present)
        @ptrFromInt(mpu_base)
    else
        @compileError("This chip does not have a MPU.");

    pub const dbg: (if (@hasDecl(core, "DebugRegisters"))
        *volatile core.DebugRegisters
    else
        *volatile anyopaque) = @ptrFromInt(coredebug_base);

    pub const itm: (if (@hasDecl(core, "ITM"))
        *volatile core.ITM
    else
        *volatile anyopaque) = @ptrFromInt(itm_base);

    pub const tpiu: (if (@hasDecl(core, "TPIU"))
        *volatile core.TPIU
    else
        *volatile anyopaque) = @ptrFromInt(tpi_base);
};

pub const types = struct {
    pub const peripherals = struct {
        /// System Control Block (SCB).
        pub const SystemControlBlock = core.SystemControlBlock;

        /// Nested Vector Interrupt Controller (NVIC).
        pub const NestedVectorInterruptController = core.NestedVectorInterruptController;

        /// System Timer (SysTick).
        pub const SysTick = extern struct {
            /// Control and Status Register.
            CTRL: mmio.Mmio(packed struct(u32) {
                /// Enables the counter:
                /// 0 = counter disabled.
                /// 1 = counter enabled.
                ENABLE: u1,
                /// Enables SysTick exception request:
                /// 0 = counting down to zero does not assert the SysTick exception request
                /// 1 = counting down to zero asserts the SysTick exception request.
                ///
                /// Software can use COUNTFLAG to determine if SysTick has ever counted to zero.
                TICKINT: u1,
                /// Indicates the clock source:
                /// 0 = external clock
                /// 1 = processor clock.
                CLKSOURCE: u1,
                reserved0: u13 = 0,
                /// Returns 1 if timer counted to 0 since last time this was read.
                COUNTFLAG: u1,
                reserved1: u15 = 0,
            }),
            /// Reload Value Register.
            LOAD: mmio.Mmio(packed struct(u32) {
                /// Value to load into the VAL register when the counter is enabled and when it reaches 0.
                RELOAD: u24,
                reserved0: u8 = 0,
            }),
            /// Current Value Register.
            VAL: mmio.Mmio(packed struct(u32) {
                /// Reads return the current value of the SysTick counter.
                /// A write of any value clears the field to 0, and also clears the CTRL.COUNTFLAG bit to 0.
                CURRENT: u24,
                reserved0: u8 = 0,
            }),
            /// Calibration Register.
            CALIB: mmio.Mmio(packed struct(u32) {
                /// Reload value for 10ms (100Hz) timing, subject to system clock skew errors. If the value
                /// reads as zero, the calibration value is not known.
                TENMS: u24,
                reserved0: u6 = 0,
                /// Indicates whether the TENMS value is exact.
                /// 0 = TENMS value is exact
                /// 1 = TENMS value is inexact, or not given.
                ///
                /// An inexact TENMS value can affect the suitability of SysTick as a software real time clock.
                SKEW: u1,
                /// Indicates whether the device provides a reference clock to the processor:
                /// 0 = reference clock provided
                /// 1 = no reference clock provided.
                /// If your device does not provide a reference clock, the CTRL.CLKSOURCE bit reads-as-one
                /// and ignores writes.
                NOREF: u1,
            }),
        };

        /// Memory Protection Unit (MPU).
        pub const MemoryProtectionUnit = if (@hasDecl(core, "MemoryProtectionUnit"))
            core.MemoryProtectionUnit
        else
            @compileError("This cpu does not have a MPU.");
    };
};
