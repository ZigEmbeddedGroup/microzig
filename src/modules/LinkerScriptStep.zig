const std = @import("std");
const MemoryRegion = @import("MemoryRegion.zig");
const Chip = @import("Chip.zig");
const Step = std.build.Step;
const Builder = std.build.Builder;
const GeneratedFile = std.build.GeneratedFile;

const LinkerscriptStep = @This();

step: Step,
generated_file: std.build.GeneratedFile,
builder: *Builder,
chip: Chip,

pub fn create(builder: *Builder, chip: Chip) !*LinkerscriptStep {
    var hasher = std.hash.SipHash128(1, 2).init("abcdefhijklmnopq");

    hasher.update(chip.name);
    hasher.update(chip.path);
    hasher.update(chip.cpu.name);
    hasher.update(chip.cpu.path);

    var mac: [16]u8 = undefined;
    hasher.final(&mac);

    const filename = try std.fmt.allocPrint(builder.allocator, "{}{s}", .{
        std.fmt.fmtSliceHexLower(&mac),
        ".ld",
    });

    const path = try std.fs.path.join(builder.allocator, &.{
        "zig-cache",
        "microzig",
        filename,
    });
    try std.fs.cwd().makePath(std.fs.path.dirname(path).?);

    var ret = try builder.allocator.create(LinkerscriptStep);
    ret.* = LinkerscriptStep{
        .step = Step.init(.custom, "linkerscript", builder.allocator, make),
        .generated_file = .{
            .step = &ret.step,
            .path = path,
        },
        .builder = builder,
        .chip = chip,
    };
    return ret;
}

fn make(step: *Step) !void {
    const linkerscript = @fieldParentPtr(LinkerscriptStep, "step", step);
    const file = try std.fs.cwd().createFile(linkerscript.generated_file.path.?, .{});
    defer file.close();

    const target = linkerscript.chip.cpu.target;
    if (target.cpu_arch == null) {
        std.log.err("target does not have 'cpu_arch'", .{});
        return error.NoCpuArch;
    }

    const writer = file.writer();
    try writer.print(
        \\/*
        \\ * This file was auto-generated by microzig
        \\ *
        \\ * Target CPU:  {s}
        \\ * Target Chip: {s}
        \\ */
        \\
        // This is not the "true" entry point, but there's no such thing on embedded platforms
        // anyways. This is the logical entrypoint that should be invoked when
        // stack, .data and .bss are set up and the CPU is ready to be used.
        \\ENTRY(microzig_main);
        \\
        \\
    , .{ linkerscript.chip.cpu.name, linkerscript.chip.name });

    try writer.writeAll("MEMORY\n{\n");
    {
        var counters = [2]usize{ 0, 0 };
        for (linkerscript.chip.memory_regions) |region| {
            // flash (rx!w) : ORIGIN = 0x00000000, LENGTH = 512k

            switch (region.kind) {
                .flash => {
                    try writer.print("  flash{d} (rx!w)", .{counters[0]});
                    counters[0] += 1;
                },
                .ram => {
                    try writer.print("  ram{d}   (rw!x)", .{counters[1]});
                    counters[1] += 1;
                },
                .custom => |custom| {
                    try writer.print("  {s} (", .{custom.name});
                    if (custom.readable) try writer.writeAll("r");
                    if (custom.writeable) try writer.writeAll("w");
                    if (custom.executable) try writer.writeAll("x");

                    if (!custom.readable or !custom.writeable or !custom.executable) {
                        try writer.writeAll("!");
                        if (!custom.readable) try writer.writeAll("r");
                        if (!custom.writeable) try writer.writeAll("w");
                        if (!custom.executable) try writer.writeAll("x");
                    }
                    try writer.writeAll(")");
                },
            }
            try writer.print(" : ORIGIN = 0x{X:0>8}, LENGTH = 0x{X:0>8}\n", .{ region.offset, region.length });
        }
    }

    try writer.writeAll("}\n\nSECTIONS\n{\n");
    {
        try writer.writeAll(
            \\  .text :
            \\  {
            \\     KEEP(*(microzig_flash_start))
            \\     *(.text*)
            \\  } > flash0
            \\
            \\
        );

        if (target.cpu_arch.? == .arm or target.cpu_arch.? == .thumb) {
            try writer.writeAll(
                \\  .ARM.exidx : {
                \\      *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                \\  } >flash0
                \\
                \\
            );
        }

        try writer.writeAll(
            \\  .data :
            \\  {
            \\     microzig_data_start = .;
            \\     *(.rodata*)
            \\     *(.data*)
            \\     microzig_data_end = .;
            \\  } > ram0 AT> flash0
            \\
            \\  .bss (NOLOAD) :
            \\  {
            \\      microzig_bss_start = .;
            \\      *(.bss*)
            \\      microzig_bss_end = .;
            \\  } > ram0
            \\
            \\  microzig_data_load_start = LOADADDR(.data);
            \\
        );
    }
    try writer.writeAll("}\n");

    // TODO: Assert that the flash can actually hold all data!
    // try writer.writeAll(
    //     \\
    //     \\  ASSERT( (SIZEOF(.text) + SIZEOF(.data) > LENGTH(flash0)), "Error: .text + .data is too large for flash!" );
    //     \\
    // );
}
