const std = @import("std");

pub const Args = struct {
    cpu_name: []const u8,
    chip_name: []const u8,
    flash_size: u64,
    ram_size: u64,
};

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();

    var arena = std.heap.ArenaAllocator.init(gpa.allocator());
    defer arena.deinit();

    const allocator = arena.allocator();
    const args = try std.process.argsAlloc(allocator);

    const json_args = args[1];
    const output_path = args[2];

    const parsed_args = try std.json.parseFromSlice(Args, allocator, json_args, .{});
    const program_args = parsed_args.value;

    const file = try std.fs.cwd().createFile(output_path, .{});
    defer file.close();

    const writer = file.writer();
    try writer.print(
        \\/*
        \\ * This file was auto-generated by microzig
        \\ *
        \\ * Target CPU:  {[cpu]s}
        \\ * Target Chip: {[chip]s}
        \\ */
        \\
    , .{
        .cpu = program_args.cpu_name,
        .chip = program_args.chip_name,
    });

    try writer.writeAll(
        \\MEMORY
        \\{
        \\
    );
    try writer.print("  FLASH    (rx!w) : ORIGIN = 0x08000000, LENGTH = 0x{X:0>8}\n", .{program_args.flash_size});
    try writer.print("  RAM      (rw!x) : ORIGIN = 0x20000000, LENGTH = 0x{X:0>8}\n", .{program_args.ram_size});

    try writer.writeAll(
        \\}
        \\
    );
    try writer.writeAll(
        \\SECTIONS
        \\{
        \\  .text :
        \\  {
        \\     KEEP(*(microzig_flash_start))
        \\     *(.text*)
        \\  } > FLASH
        \\
        \\  .rodata :
        \\  {
        \\     *(.srodata*)
        \\     *(.rodata*)
        \\  } > FLASH
        \\
        \\  .data :
        \\  {
        \\     microzig_data_start = .;
        \\     *(.sdata*)
        \\     *(.data*)
        \\     microzig_data_end = .;
        \\  } > RAM AT> FLASH
        \\
        \\  .bss (NOLOAD) :
        \\  {
        \\      microzig_bss_start = .;
        \\      *(.bss*)
        \\      *(.sbss*)
        \\      microzig_bss_end = .;
        \\  } > RAM
        \\
        \\  .flash_end :
        \\  {
        \\      microzig_flash_end = .;
        \\  } > FLASH
        \\
        \\  microzig_data_load_start = LOADADDR(.data);
        \\
        \\  PROVIDE(__global_pointer$ = microzig_data_start + 0x800);
        \\}
        \\
    );
}
