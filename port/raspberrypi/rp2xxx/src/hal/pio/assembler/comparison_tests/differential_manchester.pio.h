// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------------------- //
// differential_manchester_tx //
// -------------------------- //

#define differential_manchester_tx_wrap_target 0
#define differential_manchester_tx_wrap 9

#define differential_manchester_tx_offset_start 0u

static const uint16_t differential_manchester_tx_program_instructions[] = {
            //     .wrap_target
    0x6021, //  0: out    x, 1                       
    0x1e24, //  1: jmp    !x, 4           side 1 [6] 
    0xa042, //  2: nop                               
    0x1600, //  3: jmp    0               side 0 [6] 
    0x0705, //  4: jmp    5                      [7] 
    0x6021, //  5: out    x, 1                       
    0x1629, //  6: jmp    !x, 9           side 0 [6] 
    0xa042, //  7: nop                               
    0x1e05, //  8: jmp    5               side 1 [6] 
    0x0700, //  9: jmp    0                      [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program differential_manchester_tx_program = {
    .instructions = differential_manchester_tx_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config differential_manchester_tx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + differential_manchester_tx_wrap_target, offset + differential_manchester_tx_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void differential_manchester_tx_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_gpio_init(pio, pin);
    pio_sm_config c = differential_manchester_tx_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset + differential_manchester_tx_offset_start, &c);
    // Execute a blocking pull so that we maintain the initial line state until data is available
    pio_sm_exec(pio, sm, pio_encode_pull(false, true));
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// -------------------------- //
// differential_manchester_rx //
// -------------------------- //

#define differential_manchester_rx_wrap_target 5
#define differential_manchester_rx_wrap 9

#define differential_manchester_rx_offset_start 0u

static const uint16_t differential_manchester_rx_program_instructions[] = {
    0x2ba0, //  0: wait   1 pin, 0               [11]
    0x00c4, //  1: jmp    pin, 4                     
    0x4021, //  2: in     x, 1                       
    0x0000, //  3: jmp    0                          
    0x4141, //  4: in     y, 1                   [1] 
            //     .wrap_target
    0x2b20, //  5: wait   0 pin, 0               [11]
    0x00c9, //  6: jmp    pin, 9                     
    0x4041, //  7: in     y, 1                       
    0x0000, //  8: jmp    0                          
    0x4121, //  9: in     x, 1                   [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program differential_manchester_rx_program = {
    .instructions = differential_manchester_rx_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config differential_manchester_rx_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + differential_manchester_rx_wrap_target, offset + differential_manchester_rx_wrap);
    return c;
}

static inline void differential_manchester_rx_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    pio_sm_config c = differential_manchester_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    sm_config_set_in_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    // X and Y are set to 0 and 1, to conveniently emit these to ISR/FIFO.
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 1));
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 0));
    pio_sm_set_enabled(pio, sm, true);
}

#endif

