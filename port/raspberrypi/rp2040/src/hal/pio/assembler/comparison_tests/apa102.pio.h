// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// apa102_mini //
// ----------- //

#define apa102_mini_wrap_target 0
#define apa102_mini_wrap 1

static const uint16_t apa102_mini_program_instructions[] = {
            //     .wrap_target
    0x6001, //  0: out    pins, 1         side 0     
    0xb042, //  1: nop                    side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program apa102_mini_program = {
    .instructions = apa102_mini_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config apa102_mini_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + apa102_mini_wrap_target, offset + apa102_mini_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void apa102_mini_program_init(PIO pio, uint sm, uint offset,
        uint baud, uint pin_clk, uint pin_din) {
    pio_sm_set_pins_with_mask(pio, sm, 0, (1u << pin_clk) | (1u << pin_din));
    pio_sm_set_pindirs_with_mask(pio, sm, ~0u, (1u << pin_clk) | (1u << pin_din));
    pio_gpio_init(pio, pin_clk);
    pio_gpio_init(pio, pin_din);
    pio_sm_config c = apa102_mini_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_din, 1);
    sm_config_set_sideset_pins(&c, pin_clk);
    // Shift to right, autopull with threshold 32
    sm_config_set_out_shift(&c, false, true, 32);
    // Deeper FIFO as we're not doing any RX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    // We transmit 1 bit every 2 execution cycles
    float div = (float)clock_get_hz(clk_sys) / (2 * baud);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ------------- //
// apa102_rgb555 //
// ------------- //

#define apa102_rgb555_wrap_target 0
#define apa102_rgb555_wrap 14

#define apa102_rgb555_offset_pixel_out 0u
#define apa102_rgb555_offset_bit_run 9u

static const uint16_t apa102_rgb555_program_instructions[] = {
            //     .wrap_target
    0x80e0, //  0: pull   ifempty block              
    0xe022, //  1: set    x, 2                       
    0x40e5, //  2: in     osr, 5                     
    0x6065, //  3: out    null, 5                    
    0x4063, //  4: in     null, 3                    
    0x0042, //  5: jmp    x--, 2                     
    0x4048, //  6: in     y, 8                       
    0xa0d6, //  7: mov    isr, ::isr                 
    0x6061, //  8: out    null, 1                    
    0xe03f, //  9: set    x, 31                      
    0xe000, // 10: set    pins, 0                    
    0xa606, // 11: mov    pins, isr              [6] 
    0xe001, // 12: set    pins, 1                    
    0x46c1, // 13: in     isr, 1                 [6] 
    0x004a, // 14: jmp    x--, 10                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program apa102_rgb555_program = {
    .instructions = apa102_rgb555_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config apa102_rgb555_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + apa102_rgb555_wrap_target, offset + apa102_rgb555_wrap);
    return c;
}
#endif

