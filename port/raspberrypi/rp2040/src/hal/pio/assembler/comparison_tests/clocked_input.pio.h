// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// clocked_input //
// ------------- //

#define clocked_input_wrap_target 0
#define clocked_input_wrap 2

static const uint16_t clocked_input_program_instructions[] = {
            //     .wrap_target
    0x2021, //  0: wait   0 pin, 1                   
    0x20a1, //  1: wait   1 pin, 1                   
    0x4001, //  2: in     pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program clocked_input_program = {
    .instructions = clocked_input_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config clocked_input_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + clocked_input_wrap_target, offset + clocked_input_wrap);
    return c;
}

static inline void clocked_input_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = clocked_input_program_get_default_config(offset);
    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, pin);
    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin + 1);
    // Shifting to left matches the customary MSB-first ordering of SPI.
    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        8      // Autopush threshold = 8
    );
    // We only receive, so disable the TX FIFO to make the RX FIFO deeper.
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

